#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.
usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 mountdevice <mount dir> <mount device> <json params>"
	err "\t$0 unmountdevice <mount dir>"
	exit 1
}

err() {
	echo -ne $* 1>&2
}

log() {
	echo -ne $* >&1
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

domount() {
	MNTPATH=$1
	FILE=$(echo $2 | jq -r '.file')
	FSTYPE=$(echo $2 | jq -r '.["kubernetes.io/fsType"]')
	MMP=$(echo $2 | jq -r '.mmp')
	SIZE=$(echo $2 | jq -r '.size' | tr '[:lower:]' '[:upper:]')

	if [ "${MMP}" != "false" ] && [ "$FSTYPE" == "ext4" ]; then
		MMP_INTERVAL=$(echo $3 | jq -r '.mmpUpdateInterval')
		[ "$MMP_INTERVAL" == "null" ] && MMP_INTERVAL=5
		MMP_OPT="-O mmp -E mmp_update_interval=${MMP_INTERVAL}"
	fi

	if [ ! -f "${FILE}" ]; then
	    if [ -z "${SIZE}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"${FILE} does not exist\"}"
		exit 1
            else
                mkdir -p "$(dirname "${FILE}")"
                truncate -s ${SIZE} "${FILE}"
            fi
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	VOLFSTYPE=`blkid -o udev ${FILE} 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2`
	if [ "${VOLFSTYPE}" == "" ]; then

		mkfs -t ${FSTYPE} ${MMP_OPT} ${FILE} >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			err "{ \"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${FILE}\"}"
			exit 1
		fi
	fi

	mkdir -p "${MNTPATH}" &> /dev/null

	mount -o loop "${FILE}" "${MNTPATH}" &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${FILE} at ${MNTPATH}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

unmount() {
	MNTPATH=$1
	if [ ! -d ${MNTPATH} ]; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi

	log "{\"status\": \"Success\"}"
	exit 0
}

op=$1

if ! command -v jq >/dev/null 2>&1; then
	err "{ \"status\": \"Failure\", \"message\": \"'jq' binary not found. Please install jq package before using this driver\"}"
	exit 1
fi

if [ "$op" = "init" ]; then
        log '{"status": "Success", "capabilities": {"attach": false}}'
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	mount)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	*)
		log "{ \"status\": \"Not supported\" }"
		exit 0
esac

exit 1
