#!/bin/sh
# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Notes:
#  - Please install "jq" package before using this driver.

PATH="$PATH:$(dirname "$(readlink -f "$0")")"

# enable debug
#echo "$@" >> /tmp/flex-qemu-nbd.log

usage() {
    cat 1>&2 <<EOF

Invalid usage. Usage: 
    $(basename $0) init
    $(basename $0) waitforattach <json params>
    $(basename $0) mountdevice <mount dir> <mount device> <json params>
    $(basename $0) unmountdevice <mount dir>

EOF
    exit 1
}

err() {
    printf "$*" 1>&2
}

log() {
    printf "$*" >&1
}

getdevice() {
    # Find and connect new nbd device
    if [ -z "${NBDDEVICE}" ]; then
        local NBDNUMBERS="$(ls -1 /dev/nbd[0-9]* | grep -o [0-9]* | sort -h)"
        for i in $NBDNUMBERS; do
            if lsblk "/dev/nbd$i" &>/dev/null && mkfifo /run/lock/qemu-nbd-nbd$i 2> /dev/null; then
                local NBDDEVICE="/dev/nbd$i"
                break
            fi
        done
    fi
    echo "$NBDDEVICE"
}

getvolumename() {
    SHARE=$(echo "$1" | jq -r '.share')
    FILE=$(echo "$1" | jq -r '.file')
    if [ "${SHARE}" != "null" ]; then
        FILE="${SHARE}/${FILE}"
        VOLUMENAME="$(echo "$FILE" | tr '/' '-')"
    fi
    log "{\"status\": \"Success\", \"volumeName\":\"${VOLUMENAME}\"}"
    exit 0
}

waitforattach() {
    SHARE=$(echo "$1" | jq -r '.share')
    FILE=$(echo "$1" | jq -r '.file')
    FSTYPE=$(echo "$1" | jq -r '.["kubernetes.io/fsType"]')
    MMP=$(echo "$1" | jq -r '.mmp')
    SIZE=$(echo "$1" | jq -r '.size' | tr '[:lower:]' '[:upper:]')
    FSCK=$(echo "$1" | jq -r '.fsck')
    MMP_INTERVAL=$(echo "$1" | jq -r '.mmpUpdateInterval')
    FSCK_OPTIONS=$(echo "$1" | jq -r '.fsck_options')
    MOUNT_OPTIONS=$(echo "$1" | jq -r '.mount_options')
    if [ "${SHARE}" != "null" ]; then
        FILE="${SHARE}/${FILE}"
    fi

    # Load defaults
    [ "$FSTYPE" = "" ] && FSTYPE="ext4"
    [ "$MMP_INTERVAL" = null ] && MMP_INTERVAL=5 
    [ "$FSCK_OPTIONS" = null ] && FSCK_OPTIONS="a"

    # Calculate multimount protection options
    case "$MMP" in false|no|0)
        if [ "${FSTYPE}" = "ext4" ]; then
            MMP_OPT="-O mmp -E mmp_update_interval=${MMP_INTERVAL}"
        fi
    ;; esac

    # Check is SHARE mountpoint
    if [ "${SHARE}" != "null" ]; then
        if ! mountpoint -q "${SHARE}"; then
            err "{ \"status\": \"Failed\", \"message\": \"${SHARE} is not mounted\"}"
            exit 0
        fi
    fi

    # Load nbd module
    modprobe nbd 2> /dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to load nbd module\"}"
        exit 1
    fi

    # Check is already attached
    NBDDEVICE="$(ps aux | sed -n "s|.*qemu-nbd -f raw -c \(/dev/nbd[0-9]\+\) ${FILE}\$|\1|p" | head -n1)"
    if [ ! -z "${NBDDEVICE}" ]; then
        log "{\"status\": \"Success\", \"device\":\"${NBDDEVICE}\"}"
        exit 0
    fi

    # Get free nbd device
    NBDDEVICE="$(getdevice "${FILE}")"
    if [ -z "${NBDDEVICE}" ]; then
        err "{\"status\": \"Failure\", \"message\": \"Free nbd device was not found\"}"
        exit 1
    fi

    # Check is FILE exists
    if [ ! -f "${FILE}" ]; then
        if [ -z "${SIZE}" ]; then
            err "{\"status\": \"Failure\", \"message\": \"${FILE} does not exist\"}"
            exit 1
        else
            mkdir -p "$(dirname "${FILE}")"
            truncate -s ${SIZE} "${FILE}"
        fi
    fi

    VOLFSTYPE=`blkid -o udev "$FILE" 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2`
    if [ "${VOLFSTYPE}" = "" ]; then
        # Make filesystem
        mkfs -t "${FSTYPE}" ${MMP_OPT} "${FILE}" >/dev/null 2>&1
        if [ $? -ne 0 ]; then
            err "{ \"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${FILE}\"}"
            exit 1
        fi
    else
        # Do filesystem check
        case "$FSCK" in false|no|0)
            fsck -${FSCK_OPTIONS} ${FILE} &>/dev/null
            if [ $? -ne 0 ]; then
                err "{ \"status\": \"Failure\", \"message\": \"Fsck -${FSCK_OPTIONS} check for ${FILE} was failed\"}"
                exit 1
            fi
        ;; esac
    fi
    
    # Setup nbd device
    qemu-nbd -f raw -c "${NBDDEVICE}" "${FILE}" &>/dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to setup nbd device "${NBDDEVICE}" from ${FILE}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\", \"device\":\"${NBDDEVICE}\"}"
    exit 0
}

mountdevice() {
    MNTPATH=$1
    NBDDEVICE=$2
    MOUNT_OPTIONS=$(echo $3 | jq -r '.mount_options')
    [ "$MOUNT_OPTIONS" = null ] && MOUNT_OPTIONS=""

    # Create mountpoint
    mkdir -p "${MNTPATH}" &> /dev/null

    # Check is already mounted
    if mountpoint -q "${MNTPATH}"; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    # Mount device
    mount -o "${MOUNT_OPTIONS}" "${NBDDEVICE}" "${MNTPATH}" &> /dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${NBDDEVICE} at ${MNTPATH}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\"}"
    exit 0
}


unmountdevice() {
    MNTPATH=$1
    NBDDEVICE=$(mount | awk "\$3 == \"$(readlink -f $MNTPATH)\" {print \$1}" | head -n 1)

    if [ ! -d ${MNTPATH} ]; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    if ! mountpoint -q "${MNTPATH}"; then
        log "{\"status\": \"Success\"}"
        exit 0
    fi

    umount ${MNTPATH} &> /dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
        exit 1
    fi

    sleep 1
    qemu-nbd -d ${NBDDEVICE} &>/dev/null
    if [ $? -ne 0 ]; then
        err "{ \"status\": \"Failure\", \"message\": \"Failed to detach device ${NBDDEVICE}\"}"
        exit 1
    fi

    log "{\"status\": \"Success\"}"
    exit 0
}

op=$1

if ! command -v jq >/dev/null 2>&1; then
    err "{ \"status\": \"Failure\", \"message\": \"'jq' binary not found. Please install jq package before using this driver\"}"
    exit 1
fi

if [ "$op" = "init" ]; then
    log "{\"status\":\"Success\",\"capabilities\":{\"attach\":true}}"
    exit 0
fi

if [ $# -lt 2 ]; then
    usage
fi

shift

case "$op" in
    waitforattach)
        waitforattach $*
        ;;
    mountdevice)
        mountdevice $*
        ;;
    unmountdevice)
        unmountdevice $*
        ;;
    *)
        log "{ \"status\": \"Not supported\" }"
        exit 0
    ;;
esac

exit 1
